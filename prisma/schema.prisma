generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int            @id @default(autoincrement())
  username           String         @unique
  email              String         @unique
  password           String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  tasks              Task[]         @relation("UserTasks")
  createdProjects    Project[]      @relation("CreatedProjects")
  userProjects       UserProject[]
  assignments        Assignment[]   @relation("UserAssignments")
  createdAssignments Assignment[]   @relation("AssignedTo")
  notifications      Notification[] @relation("UserNotification")
}

model Task {
  id          Int          @id @default(autoincrement())
  content     String
  status      String
  createdById Int
  createdBy   User         @relation("UserTasks", fields: [createdById], references: [id])
  assignments Assignment[] @relation("TaskAssignments")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Project {
  id           Int           @id @default(autoincrement())
  title        String
  description  String
  cover       String?
  adminId      Int
  admin        User          @relation("CreatedProjects", fields: [adminId], references: [id])
  userProjects UserProject[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProject {
  userId    Int
  projectId Int

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, projectId])
  @@map("user_projects")
}

model Assignment {
  id           Int  @id @default(autoincrement())
  assignedById Int?
  assignedBy   User? @relation("UserAssignments", fields: [assignedById], references: [id])
  taskId       Int
  task         Task @relation("TaskAssignments", fields: [taskId], references: [id])
  assignedToId Int
  assignedTo   User @relation("AssignedTo", fields: [assignedToId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id            Int              @id @default(autoincrement())
  type          NotificationType @default(INFO)
  content       String
  notifiable_id Int
  notifiable    User             @relation("UserNotification", fields: [notifiable_id], references: [id])
  read Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NotificationType {
  INFO
  ERROR
  WARNING
  SUCCESS
}
